> Developer: Toogle keyboard shortcuts troubleshooting

Used to find out the keycodes (showkey --keycode) and scancodes (showkey --scancode) of a key when pressed.

setxkbmap pl -print | xkbcomp - - | xkbprint - - | ps2pdf - > pl.pdf
xkbcomp /usr/share/X11/xkb/geometry/microsoft - | xkbprint -color -o - - | ps2pdf - > pl.pdf


The key codes files map a keyboard's scan codes onto useful symbolic forms. 
keycodes/evdev - default xkb_keycodes "evdev"
// Fake keycodes for virtual keys
keycodes/xfree86 - default xkb_keycodes "xfree86"

<AE01> = 49; map a keyboard key code (49 in this case) onto a symbolic key name (<AE01> in this case).
The symbols component maps the symbolic key codes created by the keycodes component onto whatever symbols the user wants to produce. 
key <LABL> { [ G1L1, G1L2, G1L3, ... ], [ G2L1, G2L2, G2L3, ... ], ... }
<LABL> is keylabel (key code) from xkb_keycodes section, GiLj is keysym for group i level j. 


types/basic - ONE_LEVEL, ALPHABETIC


partial default
partial

xkb_symbols "foo" {};
include "filename_with_foo(foo)"

<description>Czech (with &lt;\|&gt; key)</description>
  *		=       pc(pc104)  to chyba default dla wszutkich klawiatur 
geometry/pc
keycodes/evdev

partial default xkb_types "default" {}; w types; może być w więcej niż jednym pliku
partial default xkb_types "pc" {}
default xkb_types "basic" {}
partial xkb_types "internal" {}
type "PC_SUPER_LEVEL2" {}

default xkb_types "complete" {
    include "basic"
    include "mousekeys"
    include "pc"
    include "iso9995"
    include "level5"
    include "extra"
    include "numpad"
};

Defining virtual modifiers
modifier_map M { <keysym> };
modifier_map Shift  { Shift_L };

virtual_modifiers LevelThree;


partial alphanumeric_keys modifier_keys keypad_keys


// restart keyboard
systemctl restart keyboard-setup

rules/evdev.lst:501:  T3              de: German (T3)
rules/base.lst:501:  T3              de: German (T3)
rules/evdev.xml:3537:            <name>T3</name>
rules/base.xml:3537:            <name>T3</name>


        <variant>
          <configItem>
            <name>T32</name>
            <description>German (T32)</description>
          </configItem>
        </variant>

        <variant>
          <configItem>
            <name>60</name>
            <description>Polish (60%)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>602</name>
            <description>Polish (60%2)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>esdf</name>
            <description>Polish (wasd to esdf)</description>
          </configItem>
        </variant>

  60              pl: Polish (60%)
  602             pl: Polish (60%2)
  esdf            pl: Polish (wasd to esdf)

    // Main keys
    // Order of mods (defined by EIGHT_LEVEL_SEMIALPHABETIC) is:
    //           [ None,      Shift,     Sym,          Shift+Sym,      Num,       Shift+Num,  Sym+Num,  Shift+Sym+Num ]


keycodes/evdev <TLDE> = 49; alias <TLDE> = <ESC>;

//partial alphanumeric_keys modifier_keys
//xkb_symbols "esdf" {
    
    // Contact: Łukasz Łodożyński <lodyga@o2.pl>

    include "latin"

    name[Group1]="Polish (wasd to esdf)";

    key.type[Group1] = "EIGHT_LEVEL";   
    key <AC09>  { [ l,   L,  Right,  Right,  6,  asciicircum,    lstroke,    Lstroke ] };


    include "kpdl(comma)"
    include "level5(modifier_mapping)"
    include "level3(modifier_mapping)"
    key.type[Group1] = "THREE_LEVEL";
    key <LFSH> { [ Shift_L, Shift_L] };
    key <RTSH> { [ Shift_R, Shift_R] };
    key <RALT> { [ ISO_Level3_Shift, ISO_Level3_Shift] };
    key <CAPS> { [ ISO_Level5_Shift, ISO_Level5_Shift ] };

};



partial alphanumeric_keys modifier_keys
xkb_symbols "60" {
    
    // Contact: Łukasz Łodożyński <lodyga@o2.pl>

    include "latin"

    name[Group1]="Polish (60%)";

    key.type[Group1] = "FOUR_LEVEL";
    key <AE01>	{ [         1,     exclam,     notequal,   exclamdown ]	};
    key <AE02>	{ [         2,         at,  twosuperior, questiondown ]	};
    key <AE04>	{ [         4,     dollar,         cent,   onequarter ]	};
    key <AE05>	{ [         5,    percent,     EuroSign,        U2030 ]	};
    key <AE06>	{ [         6, asciicircum,     onehalf,   logicaland ]	};
    key <AE07>	{ [         7,  ampersand,      section,        U2248 ]	};
    key <AE08>	{ [         8,   asterisk, periodcentered, threequarters ] };
    key <AE09>	{ [         9,  parenleft, guillemotleft,   plusminus ]	};
    key <AE10>	{ [         0, parenright, guillemotright,     degree ]	};
    key <AE11>	{ [     minus, underscore,       endash,       emdash ]	};
    key <AE12>	{ [     equal,       plus,      minus,      underscore ]	};

    key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";
    key <AD01>	{ [         q,          Q,     Greek_pi,  Greek_OMEGA ]	};
    key <AD02>	{ [         w,          W,           oe,           OE ]	};
    key <AD03>	{ [         e,          E,      eogonek,      Eogonek ]	};
    key <AD04>	{ [         r,          R,    copyright,   registered ]	};
    key <AD05>	{ [         t,          T,       ssharp,    trademark ]	};
    key <AD07>	{ [         u,          U,      Home,       Home      ]	};
    key <AD08>	{ [         i,          I,      Up,         Up      ]	};
    key <AD09>	{ [         o,          O,      Prior,      Prior      ]	};
    key <AD10>	{ [         p,          P,      oacute,     acute      ]	};
    
    key.type[Group1] = "FOUR_LEVEL";
    key <AD12>	{ [bracketright, braceright, asciitilde,  dead_macron ]	};

    key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";
    key <AC01>	{ [         a,          A,      aogonek,      Aogonek ]	};
    key <AC02>	{ [         s,          S,       sacute,       Sacute ]	};
    key <AC04>	{ [         f,          F,           ae,           AE ]	};
    key <AC06>	{ [         h,          H, rightsinglequotemark, U2022 ] };
    key <AC07>	{ [         j,          J,      Left,       Left    ]	};
    key <AC08>	{ [         k,          K,      Down,       Down    ]	};

    // key.type[Group1] = "EIGHT_LEVEL";
    key <AC09>  { [ l,   L,  Right,  Right,  6,  asciicircum,    lstroke,    Lstroke ] };
    //key <AC09>  { [ l,   L,  Right,  Right] };

    key.type[Group1] = "FOUR_LEVEL";
    key <AC10>	{ [   semicolon,    colon,      lstroke,    Lstroke ] };

    key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";
    key <AB01>	{ [         z,          Z,    zabovedot,    Zabovedot ]	};
    key <AB02>	{ [         x,          X,       zacute,       Zacute ]	};
    key <AB03>	{ [         c,          C,       cacute,       Cacute ]	};
    key <AB04>	{ [         v,          V, doublelowquotemark, leftsinglequotemark ] };
    key <AB05>	{ [         b,          B, rightdoublequotemark, leftdoublequotemark ] };
    key <AB06>	{ [         n,          N,       nacute,       Nacute ]	};
    key <AB07>	{ [         m,          M,      End,        End      ]	};
    key <AB08>	{ [     comma,       less, Down,    Down ]	};
    key <AB09>	{ [    period,    greater,      Next,       Next      ]	};

    key.type[Group1] = "ONE_LEVEL";
    key <ESC>  {	[ Escape		]	};
    // key <TLDE>	{ [ Escape ]	};
    key <MENU> {	[ Super_L			]	};

    // key.type[Group1] = "TWO_LEVEL";
    // key <CAPS> { [ ISO_Level5_Shift, ISO_Level5_Shift ] };

    key.type[Group1] = "FOUR_LEVEL";
    // key <TLDE>	{ [     grave, asciitilde,      notsign,    logicalor ]	};
    key <TLDE>	{ [ Escape, Escape, Escape, Escape]	};
    key <SPCE>	{ [     space,      Tab, underscore, nobreakspace ]	};
    key <BKSL>	{ [ backslash,        bar,   grave,   dead_breve ]	};

    include "kpdl(comma)"
    include "level3(ralt_switch)"
    include "level5(caps_switch)"
    include "shift(both_capslock)"
    //include "esctlde(swap_esctlde)"
};




partial alphanumeric_keys modifier_keys
xkb_symbols "esdf" {
    
    // Contact: Łukasz Łodożyński <lodyga@o2.pl>

    include "latin"

    name[Group1]="Polish (wasd to esdf)";

    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC";   
    key <AD07>	{ [ u,  U,  Home,   Home,   7,  ampersand,  NoSymbol,   NoSymbol ]	};
    key <AD08>	{ [ i,  I,  Up,     Up,     8,  asterisk,   NoSymbol,   NoSymbol ]	};
    key <AD09>	{ [ o,  O,  Prior,  Prior,  9,  parenleft,  oacute,     Oacute ]	};

    key <AC07>	{ [ j,  J,  Left,   Left,   4,  dollar,         NoSymbol,   NoSymbol ]	};
    key <AC08>  { [ k,  K,  Down,   Down,   5,  percent,        NoSymbol,   NoSymbol ]	};
    key <AC09>  { [ l,   L,  Right,  Right,  6,  asciicircum,    lstroke,    Lstroke ] };
    key <AC10>  { [ semicolon,  colon,  Next,   Next ] };

    key <AB06>	{ [ n,  N,  Home,   Home,   0,  parenright, nacute,     Nacute ]	};
    key <AB07>	{ [ m,  M,  End,    End,    1,  exclam,     NoSymbol,   NoSymbol ]	};
    
    key <AB08>	{ [ comma,  less,   Down,   Down,   2,  at, NoSymbol,   NoSymbol ]	};
    key <AB09>	{ [ period, greater,    Next,   Next,   3,  numbersign, NoSymbol,   NoSymbol ]};

    include "kpdl(comma)"

    include "level5(modifier_mapping)"
    include "level3(modifier_mapping)"
    key.type[Group1] = "THREE_LEVEL";
    key <LFSH> { [ Shift_L, Shift_L ] };
    key <RTSH> { [ Shift_R, Shift_R ] };
    key <RALT> { [ ISO_Level3_Shift, ISO_Level5_Latch ] };
    key <CAPS> { [ ISO_Level5_Shift, ISO_Level5_Shift ] };
    
    //key.type[Group1] = "TWO_LEVEL";
    //key <LFSH> { [ Shift_L, Shift_L] };
    //key <RTSH> { [ Shift_R, Shift_R] };
   // key <RALT> { [ ISO_Level3_Latch, ISO_Level3_Latch ] };

};



partial alphanumeric_keys modifier_keys
// ISO_Level5_Latch krótki ale działa
xkb_symbols "60" {
    
    // Contact: Łukasz Łodożyński <lodyga@o2.pl>

    include "latin"

    name[Group1]="Polish (60%)";

    key <AE01>	{ [         1,     exclam,     notequal,   exclamdown ]	};
    key <AE02>	{ [         2,         at,  twosuperior, questiondown ]	};
    key <AE04>	{ [         4,     dollar,         cent,   onequarter ]	};
    key <AE05>	{ [         5,    percent,     EuroSign,        U2030 ]	};
    key <AE06>	{ [         6, asciicircum,     onehalf,   logicaland ]	};
    key <AE07>	{ [         7,  ampersand,      section,        U2248 ]	};
    key <AE08>	{ [         8,   asterisk, periodcentered, threequarters ] };
    key <AE09>	{ [         9,  parenleft, guillemotleft,   plusminus ]	};
    key <AE10>	{ [         0, parenright, guillemotright,     degree ]	};
    key <AE11>	{ [     minus, underscore,       endash,       emdash ]	};
    key <AE12>	{ [     equal,       plus,      minus,  underscore ]	};

    key <AD01>	{ [         q,          Q,     Greek_pi,  Greek_OMEGA ]	};
    key <AD02>	{ [         w,          W,           oe,           OE ]	};
    key <AD03>	{ [         e,          E,      eogonek,      Eogonek ]	};
    key <AD04>	{ [         r,          R,    copyright,   registered ]	};
    key <AD05>	{ [         t,          T,       ssharp,    trademark ]	};
    key <AD07>	{ [         u,          U,      Home,       Home      ]	};
    key <AD08>	{ [         i,          I,      Up,         Up      ]	};
    key <AD09>	{ [         o,          O,      Prior,      Prior      ]	};
    key <AD10>	{ [         p,          P,      oacute,     acute      ]	};
    key <AD12>	{ [bracketright, braceright, asciitilde,  dead_macron ]	};


    key <AC01>	{ [         a,          A,      aogonek,      Aogonek ]	};
    key <AC02>	{ [         s,          S,       sacute,       Sacute ]	};
    key <AC04>	{ [         f,          F,           ae,           AE ]	};
    key <AC06>	{ [         h,          H, rightsinglequotemark, U2022 ] };
    key <AC07>	{ [         j,          J,      Left,       Left    ]	};
    key <AC08>	{ [         k,          K,      Down,       Down    ]	};
    key <AC09>	{ [         l,          L,      Right,      Right   ]	};
    key <AC10>	{ [   semicolon,    colon,      lstroke,    Lstroke ] };

    key <AB01>	{ [         z,          Z,    zabovedot,    Zabovedot ]	};
    key <AB02>	{ [         x,          X,       zacute,       Zacute ]	};
    key <AB03>	{ [         c,          C,       cacute,       Cacute ]	};
    key <AB04>	{ [         v,          V, doublelowquotemark, leftsinglequotemark ] };
    key <AB05>	{ [         b,          B, rightdoublequotemark, leftdoublequotemark ] };
    key <AB06>	{ [         n,          N,       nacute,       Nacute ]	};
    key <AB07>	{ [         m,          M,      End,        End      ]	};
    key <AB08>	{ [     comma,       less, Down,    Down ]	};
    key <AB09>	{ [    period,    greater,      Next,       Next      ]	};

    key <ESC>  {	[ Escape		]	};
    key <TLDE>	{ [     grave, asciitilde,      notsign,    logicalor ]	};
    key <CAPS> { [ ISO_Level5_Shift, ISO_Level5_Shift ] };
    key <SPCE>	{ [     space,      Tab, underscore, nobreakspace ]	};
    key <BKSL>	{ [ backslash,        bar,   grave,   dead_breve ]	};
    key <MENU> {	[ Menu			]	};

    include "kpdl(comma)"
    include "level3(ralt_switch)"
    include "shift(both_capslock_cancel)"

};


// 100% to 60% keyboard project
// ISO_Level5_Latch
partial alphanumeric_keys modifier_keys
xkb_symbols "60" {
    
    // Contact: Łukasz Łodożyński <lodyga@o2.pl>

    include "latin"

    name[Group1]="Polish (60%)";

    // key <AE01> { [               1,          2, 3,   4,     5,        6,           7,        8 ] };
    // key <AE01>	{ type="ALPHABETIC_CTRL", [         1,     notequal,     exclam,   exclamdown ]	};
    // key <AE01>	{ type="PC_CONTROL_LEVEL2", [         1,     exclam,     notequal,   exclamdown ]	};
    // key <AE01>	{ type="FOUR_LEVEL_ALPHABETIC", [         1,     exclam,     notequal,   exclamdown ]	};
    // key <AE01>	{ type="FOUR_LEVEL_ALPHABETIC", [         1,     F1,     F1,   F1 ]	};
    // key.type[Group1] = "EIGHT_LEVEL_SEMIALPHABETIC";
    // key <AE01> { [ equal, dollar, notequal, cent, EuroSign, sterling, yen ], [], [], [] };
    
    key <AE01>	{ [         1,     exclam,     notequal,   exclamdown ]	};
    // key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";
    key <AE02>	{ [         2,         at,  twosuperior, questiondown ]	};
    key <AE04>	{ [         4,     dollar,         cent,   onequarter ]	};
    key <AE05>	{ [         5,    percent,     EuroSign,        U2030 ]	};
    key <AE06>	{ [         6, asciicircum,     onehalf,   logicaland ]	};
    key <AE07>	{ [         7,  ampersand,      section,        U2248 ]	};
    key <AE08>	{ [         8,   asterisk, periodcentered, threequarters ] };
    key <AE09>	{ [         9,  parenleft, guillemotleft,   plusminus ]	};
    key <AE10>	{ [         0, parenright, guillemotright,     degree ]	};
    key <AE11>	{ [     minus, underscore,       endash,       emdash ]	};
    key <AE12>	{ [     equal,       plus,      minus,  underscore ]	};

    key <AD01>	{ [         q,          Q,     Greek_pi,  Greek_OMEGA ]	};
    key <AD02>	{ [         w,          W,           oe,           OE ]	};
    key <AD03>	{ [         e,          E,      eogonek,      Eogonek ]	};
    key <AD04>	{ [         r,          R,    copyright,   registered ]	};
    key <AD05>	{ [         t,          T,       ssharp,    trademark ]	};
    key <AD07>	{ [         u,          U,      Home,       Home      ]	};
    key <AD08>	{ [         i,          I,      Up,         Up      ]	};
    key <AD09>	{ [         o,          O,      Prior,      Prior      ]	};

    // ó pod p
    key <AD10>	{ [         p,          P,      oacute,     acute      ]	};
    key <AD12>	{ [bracketright, braceright, asciitilde,  dead_macron ]	};


    key <AC01>	{ [         a,          A,      aogonek,      Aogonek ]	};
    key <AC02>	{ [         s,          S,       sacute,       Sacute ]	};
    key <AC04>	{ [         f,          F,           ae,           AE ]	};
    key <AC06>	{ [         h,          H, rightsinglequotemark, U2022 ] };
    key <AC07>	{ [         j,          J,      Left,       Left    ]	};
    key <AC08>	{ [         k,          K,      Down,       Down    ]	};
    key <AC09>	{ [         l,          L,      Right,      Right   ]	};
    // mod średnika pod ł
    key <AC10>	{ [   semicolon,    colon,      lstroke,    Lstroke ] };
    // to by było dobre miejsce na Next, gdyby nie ł
    // key <AC10>	{ [   semicolon,    colon,      Next,    Next ] };

    
    key <AB01>	{ [         z,          Z,    zabovedot,    Zabovedot ]	};
    key <AB02>	{ [         x,          X,       zacute,       Zacute ]	};
    key <AB03>	{ [         c,          C,       cacute,       Cacute ]	};
    key <AB04>	{ [         v,          V, doublelowquotemark, leftsinglequotemark ] };
    key <AB05>	{ [         b,          B, rightdoublequotemark, leftdoublequotemark ] };
    // to by było dobre miejsce na Home, gdyby nie ń
    // key <AB06>	{ [         n,          N,       Home,       Home]	};
    key <AB06>	{ [         n,          N,       nacute,       Nacute ]	};
    key <AB07>	{ [         m,          M,      End,        End      ]	};
    // key <AB08>	{ [     comma,       less, lessthanequal,    greaterthanequal ]	};
    key <AB08>	{ [     comma,       less, Down,    Down ]	};
    key <AB09>	{ [    period,    greater,      Next,       Next      ]	};

    // key.type[Group1] = "ONE_LEVEL";
    key <ESC>  {	[ Escape		]	};
    key <TLDE>	{ [     grave, asciitilde,      notsign,    logicalor ]	};
    // key <TLDE>	{	[ Escape		]	};
    // key <TLDE>	{	[ ISO_Level3_Shift		]	};
    // key  <TAB> {	[ ISO_Level3_Shift	]	};
    // key <CAPS> {	[ ISO_Level5_Shift		]	};
    // key <CAPS> { [ ISO_Level3_Shift ] };
    key <CAPS> { [ ISO_Level5_Shift, ISO_Level5_Shift ] };

    // key <SPCE>	{ [     space,      space, underscore, nobreakspace ]	};
    key <SPCE>	{ [     space,      Tab, underscore, nobreakspace ]	};
    // key <BKSP> {	[ BackSpace, Delete	]	}; // VSC delete doesnt work
    // key <BKSP>	{ type="TWO_LEVEL", [         BackSpace, Delete,     BackSpace, Delete ]	};
    key <BKSL>	{ [ backslash,        bar,   grave,   dead_breve ]	};
    // key <RTRN> {	[ Return		]	};

    key <MENU> {	[ Menu			]	};
    // key <SCLK> {	[  Caps_Lock		]	};

    include "kpdl(comma)"


    // works without ralt - strange
    include "level3(ralt_switch)"
    // include "group(shifts_toggle)"

    // include "shift(lshift_both_capslock_cancel)"
    include "shift(both_capslock_cancel)"
    // include "shift(ctrl_both_capslock_cancel)"
    // include "level3(caps_switch)"
    // include "level3(bksl_switch)"
    // include "level5(ralt_switch_lock)"
};




// 100% to 60% keyboard project

//partial alphanumeric_keys modifier_keys
//xkb_symbols "602" {
    
    // Contact: Łukasz Łodożyński <lodyga@o2.pl>

    include "latin"

    name[Group1]="Polish (60%2)";


    // key <AE01>	{ type="TWO_LEVEL", [         1,     notequal,     exclam,   exclamdown ]	};
    // key <AE01>	{ [         1,     F1,     F1,   F1 ]	};
    // key.type[Group1] = "EIGHT_LEVEL_SEMIALPHABETIC";
    // key <AE01> { [ equal, dollar, notequal, cent, EuroSign, sterling, yen ], [], [], [] };
    
    key <AE01>	{ [         1,     exclam,     notequal,   exclamdown ]	};
    //key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";
    key <AE02>	{ [         2,         at,  twosuperior, questiondown ]	};
    key <AE04>	{ [         4,     dollar,         cent,   onequarter ]	};
    key <AE05>	{ [         5,    percent,     EuroSign,        U2030 ]	};
    key <AE06>	{ [         6, asciicircum,     onehalf,   logicaland ]	};
    key <AE07>	{ [         7,  ampersand,      section,        U2248 ]	};
    key <AE08>	{ [         8,   asterisk, periodcentered, threequarters ] };
    key <AE09>	{ [         9,  parenleft, guillemotleft,   plusminus ]	};
    key <AE10>	{ [         0, parenright, guillemotright,     degree ]	};
    key <AE11>	{ [     minus, underscore,       endash,       emdash ]	};
    key <AE12>	{ [     equal,       plus,      minus,  underscore ]	};

    key <AD01>	{ [         q,          Q,     Greek_pi,  Greek_OMEGA ]	};
    key <AD02>	{ [         w,          W,           oe,           OE ]	};
    key <AD03>	{ [         e,          E,      eogonek,      Eogonek ]	};
    key <AD04>	{ [         r,          R,    copyright,   registered ]	};
    key <AD05>	{ [         t,          T,       ssharp,    trademark ]	};
    key <AD07>	{ [         u,          U,      Home,       Home      ]	};
    key <AD08>	{ [         i,          I,      Up,         Up      ]	};
    key <AD09>	{ [         o,          O,      Prior,      Prior      ]	};

    // ó pod p
    key <AD10>	{ [         p,          P,      oacute,     acute      ]	};
    key <AD12>	{ [bracketright, braceright, asciitilde,  dead_macron ]	};


    key <AC01>	{ [         a,          A,      aogonek,      Aogonek ]	};
    key <AC02>	{ [         s,          S,       sacute,       Sacute ]	};
    key <AC04>	{ [         f,          F,           ae,           AE ]	};
    key <AC06>	{ [         h,          H, rightsinglequotemark, U2022 ] };
    key <AC07>	{ [         j,          J,      Left,       Left    ]	};
    key <AC08>	{ [         k,          K,      Down,       Down    ]	};
    key <AC09>	{ [         l,          L,      Right,      Right   ]	};
    // mod średnika pod ł
    // key <AC10>	{ [   semicolon,    colon,      lstroke,    Lstroke ] };
    // to by było dobre miejsce na Next, gdyby nie ł
    key <AC10>	{ [   semicolon,    colon,      Next,    Next ] };

    
    key <AB01>	{ [         z,          Z,    zabovedot,    Zabovedot ]	};
    key <AB02>	{ [         x,          X,       zacute,       Zacute ]	};
    key <AB03>	{ [         c,          C,       cacute,       Cacute ]	};
    key <AB04>	{ [         v,          V, doublelowquotemark, leftsinglequotemark ] };
    key <AB05>	{ [         b,          B, rightdoublequotemark, leftdoublequotemark ] };
    // to by było dobre miejsce na Home, gdyby nie ń
    key <AB06>	{ [         n,          N,       Home,       Home]	};
    // key <AB06>	{ [         n,          N,       nacute,       Nacute ]	};
    key <AB07>	{ [         m,          M,      End,        End      ]	};
    // key <AB08>	{ [     comma,       less, lessthanequal,    greaterthanequal ]	};
    key <AB08>	{ [     comma,       less, Down,    Down ]	};
    key <AB09>	{ [    period,    greater,      Next,       Next      ]	};

    // key.type[Group1] = "ONE_LEVEL";
    key <ESC>  {	[ Escape		]	};
    key <TLDE>	{ [     grave, asciitilde,      notsign,    logicalor ]	};
    // key <TLDE>	{	[ Escape		]	};
    // key <TLDE>	{	[ ISO_Level3_Shift		]	};
    // key  <TAB> {	[ ISO_Level3_Shift	]	};
    // key <CAPS> {	[ ISO_Level5_Shift		]	};
    key <CAPS> { [ ISO_Level3_Shift ] };

    // key <SPCE>	{ [     space,      space, underscore, nobreakspace ]	};
    key <SPCE>	{ [     space,      Tab, underscore, nobreakspace ]	};
    // key <BKSP> {	[ BackSpace, Delete	]	}; // VSC delete doesnt work
    // key <BKSP>	{ type="TWO_LEVEL", [         BackSpace, Delete,     BackSpace, Delete ]	};
    key <BKSL>	{ [ backslash,        bar,   grave,   dead_breve ]	};
    // key <RTRN> {	[ Return		]	};

    key <MENU> {	[ Menu			]	};
    // key <SCLK> {	[  Caps_Lock		]	};

    include "kpdl(comma)"

    // works without ralt - strange
    include "level3(ralt_switch)"
    // include "group(shifts_toggle)"

    // include "shift(lshift_both_capslock_cancel)"
    include "shift(both_capslock_cancel)"
    // include "shift(ctrl_both_capslock_cancel)"
    // include "level3(caps_switch)"
    // include "level3(bksl_switch)"
    // include "level3(bksl_switch)"
    // include "level5(ralt_switch_lock)"
};







//partial alphanumeric_keys modifier_keys
//xkb_symbols "esdf1" {
    
    // Contact: Łukasz Łodożyński <lodyga@o2.pl>

    include "latin"

    name[Group1]="Polish (wasd to esdf)1";

    key <AE01>	{ [         1,     exclam,     notequal,   exclamdown ]	};
    key <AE02>	{ [         2,         at,  twosuperior, questiondown ]	};
    key <AE04>	{ [         4,     dollar,         cent,   onequarter ]	};
    key <AE05>	{ [         5,    percent,     EuroSign,        U2030 ]	};
    key <AE06>	{ [         6, asciicircum,     onehalf,   logicaland ]	};
    key <AE07>	{ [         7,  ampersand,      section,        U2248 ]	};
    key <AE08>	{ [         8,   asterisk, periodcentered, threequarters ] };
    key <AE09>	{ [         9,  parenleft, guillemotleft,   plusminus ]	};
    key <AE10>	{ [         0, parenright, guillemotright,     degree ]	};
    key <AE11>	{ [     minus, underscore,       endash,       emdash ]	};

    key <AD02>	{ [         q,          Q,     Greek_pi,  Greek_OMEGA ]	};
    key <AD03>	{ [         w,          W,           oe,           OE ]	};
    key <AD04>	{ [         e,          E,      eogonek,      Eogonek ]	};
    key <AD05>	{ [         r,          R,    copyright,   registered ]	};
    key <AD06>	{ [         t,          T,       ssharp,    trademark ]	};
    key <AD01>	{ [         y,          Y,    leftarrow,          yen ]	};
    key <AD07>	{ [         u,          U,      Home,       Home      ]	};
    key <AD08>	{ [         i,          I,      Up,         Up      ]	};
    key <AD09>	{ [         o,          O,      Prior,      Prior      ]	};
    // ó pod p
    key <AD10>	{ [         p,          P,      oacute,     acute      ]	};

    key <AC02>	{ [         a,          A,      aogonek,      Aogonek ]	};
    key <AC03>	{ [         s,          S,       sacute,       Sacute ]	};
    key <AC04>	{ [         d,          D,          eth,          ETH ]	};
    key <AC05>	{ [         f,          F,           ae,           AE ]	};
    key <AC06>	{ [         g,          G,          eng,          ENG ]	};
    key <AC01>	{ [         h,          H, rightsinglequotemark, U2022 ] };
    key <AC07>	{ [         j,          J,      Left,       Left    ]	};
    key <AC08>	{ [         k,          K,      Down,       Down    ]	};
    key <AC09>	{ [         l,          L,      Right,      Right   ]	};
    // mod średnika pod ł
    key <AC10>	{ [   semicolon,    colon,      lstroke,    Lstroke ] };
    key <TLDE>	{ [     grave, asciitilde,      notsign,    logicalor ]	};

    key <AB02>	{ [         z,          Z,    zabovedot,    Zabovedot ]	};
    key <AB03>	{ [         x,          X,       zacute,       Zacute ]	};
    key <AB04>	{ [         c,          C,       cacute,       Cacute ]	};
    key <AB05>	{ [         v,          V, doublelowquotemark, leftsinglequotemark ] };
    key <AB06>	{ [         b,          B, rightdoublequotemark, leftdoublequotemark ] };
    key <AB01>	{ [         n,          N,       nacute,       Nacute ]	};
    key <AB07>	{ [         m,          M,      End,        End      ]	};
    key <AB08>	{ [     comma,       less, lessthanequal,    greaterthanequal ]	};
    key <AB09>	{ [    period,    greater,      Next,       Next      ]	};

    key <SPCE>	{ [     space,      space, nobreakspace, nobreakspace ]	};

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};